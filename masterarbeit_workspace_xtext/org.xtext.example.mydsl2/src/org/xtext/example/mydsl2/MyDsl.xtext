// automatically generated by Xtext
grammar org.xtext.example.mydsl2.MyDsl with org.eclipse.xtext.common.Terminals

import "http://are.ipd.kit.edu/FeatureCompletionModel/1.0.1" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://are.ipd.kit.edu/FeatureObjectivesModel/1.0.0" as featureObjective
import "http://are.ipd.kit.edu/FeatureSolutionModel/1.0.0" as featureSolution
import "platform:/resource/org.palladiosimulator.pcm/model/pcm.ecore#//repository" as repository

//import "http://www.xtext.org/example/mydsl1/TestDsl"

ExtensionInclusion returns featureSolution::ExtensionInclusion:
	(multiple?='multiple')?
	'ExtensionInclusion'
	id=EString
	'{'
		'name' name=EString
		'description' description=EString
		('pointCut' '{' pointCut+=PointCut ( "," pointCut+=PointCut)* '}' )?
		('advice' '{' advice+=Advice ( "," advice+=Advice)* '}' )?
	'}';



PlacementStrategy returns featureSolution::PlacementStrategy:
	PlacementStrategy_Impl | ExternalCallPlacementStrategy | InternalActionPlacementStrategy | ControlFlowPlacementStrategy;




EString returns ecore::EString:
	STRING | ID;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

PointCut returns featureSolution::PointCut:
	'PointCut'
	'{'
		'entityName' entityName=EString
		('placementStrategy' placementStrategy=PlacementStrategy)?
	'}';

Advice returns featureSolution::Advice:
	'Advice'
	'{'
		'entityName' entityName=EString
		'appears' appears=Appearance
		('pointCut' pointCut=[featureSolution::PointCut|EString])?
		('Completion' Completion=[ComplementumVisnetis|EString])?
	'}';

PlacementStrategy_Impl returns featureSolution::PlacementStrategy:
	{featureSolution::PlacementStrategy}
	'PlacementStrategy'
	;

ExternalCallPlacementStrategy returns featureSolution::ExternalCallPlacementStrategy:
	{featureSolution::ExternalCallPlacementStrategy}
	'ExternalCallPlacementStrategy'
	'{'
		('matchingSignature' matchingSignature=[repository::Signature|EString])?
	'}';
	
FQN: ID ("." ID)*;

InternalActionPlacementStrategy returns featureSolution::InternalActionPlacementStrategy:
	{featureSolution::InternalActionPlacementStrategy}
	'InternalActionPlacementStrategy'
	'{'
		('forAllInternalActionsIn' forAllInternalActionsIn=[repository::RepositoryComponent|EString])?
	'}';

ControlFlowPlacementStrategy returns featureSolution::ControlFlowPlacementStrategy:
	{featureSolution::ControlFlowPlacementStrategy}
	'ControlFlowPlacementStrategy'
	'{'
		('forAllControlFlowsIn' forAllControlFlowsIn=[repository::RepositoryComponent|EString])?
	'}';

enum Appearance returns featureSolution::Appearance:
				BEFORE = 'BEFORE' | AFTER = 'AFTER' | AROUND = 'AROUND';