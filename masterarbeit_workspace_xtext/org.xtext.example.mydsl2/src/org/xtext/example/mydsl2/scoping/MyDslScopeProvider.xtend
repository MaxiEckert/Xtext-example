/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl2.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.palladiosimulator.pcm.PcmPackage
import featureSolution.FeatureSolutionPackage
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.IScope
import featureSolution.ExternalCallPlacementStrategy

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MyDslScopeProvider extends AbstractMyDslScopeProvider {


//	override getScope(EObject ctx, EReference ref) {
//	   System.out.println("--------------- Get scope: ------------");
//	   System.out.println("--------------- CTX: " + ctx.eClass.name + "------------");
//	   System.out.println("--------------- Ref: " + ref.name + " ------------");
//	   if (ctx instanceof ExternalCallPlacementStrategy && ref == FeatureSolutionPackage.Literals.EXTERNAL_CALL_PLACEMENT_STRATEGY__MATCHING_SIGNATURE) {
//	      val container = ctx.eContainer
//	      val scope = Scopes.scopeFor(container.eContents)
//	      return scope
//	   }
//	   super.getScope(ctx, ref)
//	}
//	
//	IScope scope_ExternalCallPlacementStrategy_matchingSignature(ExternalCallPlacementStrategy a, EReference ref){
//		System.out.println("--------------- scope_ExternalCallPlacementStrategy_matchingSignature ------------");
//		return Scopes.scopeFor(a.getMatchingSignature());
//	}
}
