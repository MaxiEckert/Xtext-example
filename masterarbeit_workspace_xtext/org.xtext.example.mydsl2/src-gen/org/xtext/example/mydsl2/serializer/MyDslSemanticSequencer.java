/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl2.serializer;

import com.google.inject.Inject;
import featureSolution.Advice;
import featureSolution.ControlFlowPlacementStrategy;
import featureSolution.ExtensionInclusion;
import featureSolution.ExternalCallPlacementStrategy;
import featureSolution.FeatureSolutionPackage;
import featureSolution.InternalActionPlacementStrategy;
import featureSolution.PlacementStrategy;
import featureSolution.PointCut;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.mydsl2.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FeatureSolutionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FeatureSolutionPackage.ADVICE:
				sequence_Advice(context, (Advice) semanticObject); 
				return; 
			case FeatureSolutionPackage.CONTROL_FLOW_PLACEMENT_STRATEGY:
				sequence_ControlFlowPlacementStrategy(context, (ControlFlowPlacementStrategy) semanticObject); 
				return; 
			case FeatureSolutionPackage.EXTENSION_INCLUSION:
				sequence_ExtensionInclusion(context, (ExtensionInclusion) semanticObject); 
				return; 
			case FeatureSolutionPackage.EXTERNAL_CALL_PLACEMENT_STRATEGY:
				sequence_ExternalCallPlacementStrategy(context, (ExternalCallPlacementStrategy) semanticObject); 
				return; 
			case FeatureSolutionPackage.INTERNAL_ACTION_PLACEMENT_STRATEGY:
				sequence_InternalActionPlacementStrategy(context, (InternalActionPlacementStrategy) semanticObject); 
				return; 
			case FeatureSolutionPackage.PLACEMENT_STRATEGY:
				sequence_PlacementStrategy_Impl(context, (PlacementStrategy) semanticObject); 
				return; 
			case FeatureSolutionPackage.POINT_CUT:
				sequence_PointCut(context, (PointCut) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Advice returns Advice
	 *
	 * Constraint:
	 *     (entityName=EString appears=Appearance pointCut=[PointCut|EString]? Completion=[ComplementumVisnetis|EString]?)
	 */
	protected void sequence_Advice(ISerializationContext context, Advice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PlacementStrategy returns ControlFlowPlacementStrategy
	 *     ControlFlowPlacementStrategy returns ControlFlowPlacementStrategy
	 *
	 * Constraint:
	 *     forAllControlFlowsIn=[RepositoryComponent|EString]?
	 */
	protected void sequence_ControlFlowPlacementStrategy(ISerializationContext context, ControlFlowPlacementStrategy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExtensionInclusion returns ExtensionInclusion
	 *
	 * Constraint:
	 *     (
	 *         multiple?='multiple'? 
	 *         id=EString 
	 *         name=EString 
	 *         description=EString 
	 *         (pointCut+=PointCut pointCut+=PointCut*)? 
	 *         (advice+=Advice advice+=Advice*)?
	 *     )
	 */
	protected void sequence_ExtensionInclusion(ISerializationContext context, ExtensionInclusion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PlacementStrategy returns ExternalCallPlacementStrategy
	 *     ExternalCallPlacementStrategy returns ExternalCallPlacementStrategy
	 *
	 * Constraint:
	 *     matchingSignature=[Signature|EString]?
	 */
	protected void sequence_ExternalCallPlacementStrategy(ISerializationContext context, ExternalCallPlacementStrategy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PlacementStrategy returns InternalActionPlacementStrategy
	 *     InternalActionPlacementStrategy returns InternalActionPlacementStrategy
	 *
	 * Constraint:
	 *     forAllInternalActionsIn=[RepositoryComponent|EString]?
	 */
	protected void sequence_InternalActionPlacementStrategy(ISerializationContext context, InternalActionPlacementStrategy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PlacementStrategy returns PlacementStrategy
	 *     PlacementStrategy_Impl returns PlacementStrategy
	 *
	 * Constraint:
	 *     {PlacementStrategy}
	 */
	protected void sequence_PlacementStrategy_Impl(ISerializationContext context, PlacementStrategy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PointCut returns PointCut
	 *
	 * Constraint:
	 *     (entityName=EString placementStrategy=PlacementStrategy?)
	 */
	protected void sequence_PointCut(ISerializationContext context, PointCut semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
