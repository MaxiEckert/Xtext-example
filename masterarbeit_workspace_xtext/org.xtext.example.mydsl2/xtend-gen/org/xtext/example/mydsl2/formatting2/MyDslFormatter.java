/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl2.formatting2;

import com.google.inject.Inject;
import featureSolution.Advice;
import featureSolution.ExtensionInclusion;
import featureSolution.PlacementStrategy;
import featureSolution.PointCut;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl2.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;
  
  protected void _format(final ExtensionInclusion extensionInclusion, @Extension final IFormattableDocument document) {
    EList<PointCut> _pointCut = extensionInclusion.getPointCut();
    for (final PointCut pointCut : _pointCut) {
      document.<PointCut>format(pointCut);
    }
    EList<Advice> _advice = extensionInclusion.getAdvice();
    for (final Advice advice : _advice) {
      document.<Advice>format(advice);
    }
  }
  
  protected void _format(final PointCut pointCut, @Extension final IFormattableDocument document) {
    document.<PlacementStrategy>format(pointCut.getPlacementStrategy());
  }
  
  public void format(final Object extensionInclusion, final IFormattableDocument document) {
    if (extensionInclusion instanceof ExtensionInclusion) {
      _format((ExtensionInclusion)extensionInclusion, document);
      return;
    } else if (extensionInclusion instanceof PointCut) {
      _format((PointCut)extensionInclusion, document);
      return;
    } else if (extensionInclusion instanceof XtextResource) {
      _format((XtextResource)extensionInclusion, document);
      return;
    } else if (extensionInclusion instanceof EObject) {
      _format((EObject)extensionInclusion, document);
      return;
    } else if (extensionInclusion == null) {
      _format((Void)null, document);
      return;
    } else if (extensionInclusion != null) {
      _format(extensionInclusion, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(extensionInclusion, document).toString());
    }
  }
}
